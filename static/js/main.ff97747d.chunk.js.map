{"version":3,"sources":["ApolloSetup.js","LoginForm.js","AvailableGroups.js","AddChat.js","DynamicGroupMessages.js","GroupChatEntries.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["basicTokenStore","setBasicTokenStore","_ref","token","authLink","setContext","_","_ref2","headers","Object","objectSpread","authorization","concat","endpoints","split","_ref3","query","_getMainDefinition","getMainDefinition","kind","operation","WebSocketLink","uri","options","reconnect","HttpLink","apolloClient","ApolloClient","link","cache","InMemoryCache","useInputHook","initialValue","arguments","length","undefined","_useState","useState","_useState2","slicedToArray","value","setValue","onChange","e","target","LoginForm","handleLogin","_useState3","_useState4","loginMode","setLoginMode","email","name","password","react_default","a","createElement","Modal","Dialog","Body","className","FormGroup","FormControl","assign","autoFocus","type","placeholder","Button","onClick","allGroups","gql","_templateObject","AvailableGroups","group","react_apollo_esm","loading","error","data","JSON","stringify","style","color","map","currentGroup","ix","selectedGroup","id","key","data-testid","createGroupChatEntryMutation","AddChat_templateObject","AddChatComponent","inputRef","user","createGroupChatEntry","onSubmit","preventDefault","variables","fromId","content","groupId","InputGroup","node","AddChat","mutation","AddChat_AddChatComponent","TRACK_CHAT_UPDATES_BY_GROUP","DynamicGroupMessages_templateObject","DynamicGroupMessages","subscribeToMore","apolloQuery","useEffect","unsubscribeFromGroup","document","updateQuery","chatQueryResponse","subscriptionData","GroupChatEntry","_chatQueryResponse$al","allGroupChatEntries","toConsumableArray","filter","entry","deleted","GroupChatEntries_templateObject","GroupMessages","console","log","fetchPolicy","objectWithoutProperties","DynamicGroupMessages_DynamicGroupMessages","ChatScreen","handleLogout","AvailableGroups_AvailableGroups","GroupChatEntries_GroupMessages","AddChat_AddChat","createUserAndSignOn","App_templateObject","signOn","_templateObject2","App","setUser","setError","asyncToGenerator","regenerator_default","mark","_callee","result","_result$data","_data$signinUser","signinUser","_signinUser$token","usefulBit","_user","wrap","_context","prev","next","mutate","sent","t0","message","stop","_x","apply","this","client","Fragment","ChatScreen_ChatScreen","resetStore","LoginForm_LoginForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff97747d.chunk.js","sourcesContent":["import { ApolloClient } from \"apollo-client\";\n\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\n\nlet basicTokenStore = null;\nexport const setBasicTokenStore = ({ token }) => (basicTokenStore = token);\n\n// Add token to header\nconst authLink = setContext((_, { headers }) => {\n\tconst token = basicTokenStore;\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\"\n\t\t}\n\t};\n});\n\n// Ensure subscriptions hit the websocket connection and CRUD hit Simple API\nconst endpoints = split(\n\t({ query }) => {\n\t\tconst { kind, operation } = getMainDefinition(query);\n\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t},\n\tnew WebSocketLink({\n\t\turi: `wss://subscriptions.graph.cool/v1/cjhdp4tzl2r890195ggdfyv2h`,\n\t\toptions: {\n\t\t\treconnect: true\n\t\t}\n\t}),\n\tnew HttpLink({\n\t\turi: \"https://api.graph.cool/simple/v1/cjhdp4tzl2r890195ggdfyv2h\"\n\t})\n);\n\n// Bind ApolloClient to our endpoint and Auth config.\nexport const apolloClient = new ApolloClient({\n\tlink: authLink.concat(endpoints),\n\tcache: new InMemoryCache()\n});\n","import React, { useState } from \"react\";\n\nimport { FormGroup, Modal, FormControl, Button } from \"react-bootstrap\";\n\nexport const useInputHook = (initialValue = \"\") => {\n\tconst [value, setValue] = useState(initialValue);\n\tconst onChange = e => setValue(e.target.value);\n\treturn {\n\t\tvalue,\n\t\tonChange\n\t};\n};\n\nexport const LoginForm = ({ handleLogin }) => {\n\tconst [loginMode, setLoginMode] = useState(true); // Login or Sign Up\n\tconst email = useInputHook();\n\tconst name = useInputHook();\n\tconst password = useInputHook();\n\treturn (\n\t\t<Modal.Dialog>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"login-logo-container\">\n\t\t\t\t\t<h1>Chatable</h1>\n\t\t\t\t\t<h5>Create a user or use 'test/test' for signin</h5>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"login-title-container\">\n\t\t\t\t\t<span className=\"login-title-text\">{loginMode ? \"Login\" : \"Sign Up\"}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<FormGroup>\n\t\t\t\t\t{!loginMode && (\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Your name (to be used in chat)\"\n\t\t\t\t\t\t\t{...name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<FormControl autoFocus={true} type=\"email\" placeholder=\"Email\" {...email} />\n\t\t\t\t\t<FormControl type=\"password\" placeholder=\"Password\" {...password} />\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Button className=\"pointer\" onClick={() => setLoginMode(!loginMode)}>\n\t\t\t\t\t\t{loginMode ? \"Don't have an account? Sign up\" : \"Have an account? Log in\"}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"pull-right pointer\"\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thandleLogin({\n\t\t\t\t\t\t\t\tname: name.value,\n\t\t\t\t\t\t\t\temail: email.value,\n\t\t\t\t\t\t\t\tpassword: password.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{loginMode ? \"Login\" : \"Create User\"}\n\t\t\t\t\t</Button>\n\t\t\t\t</FormGroup>\n\t\t\t</Modal.Body>\n\t\t</Modal.Dialog>\n\t);\n};\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst allGroups = gql`\n\t{\n\t\tallGroups(orderBy: name_ASC) {\n\t\t\tid\n\t\t\tname\n\t\t\tdescription\n\t\t}\n\t}\n`;\n\nexport const AvailableGroups = ({ group }) => {\n\treturn (\n\t\t<Query query={allGroups}>\n\t\t\t{({ loading, error, data }) => {\n\t\t\t\tif (loading) return <p>Loading...</p>;\n\t\t\t\tif (error) return <p>Error :( {JSON.stringify(error)}</p>;\n\t\t\t\treturn (\n\t\t\t\t\t<ul style={{ color: \"white\" }}>\n\t\t\t\t\t\t{data.allGroups.map((currentGroup, ix) => {\n\t\t\t\t\t\t\tconst selectedGroup = currentGroup.id === group.id;\n\t\t\t\t\t\t\tconst key = `groupSelector_${currentGroup.id}`;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={key} data-testid={key}>\n\t\t\t\t\t\t\t\t\t{currentGroup.name} <br />[{currentGroup.id}]<br />\n\t\t\t\t\t\t\t\t\t{selectedGroup ? \"Current Group\" : \"\"}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Query>\n\t);\n};\n","import React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { FormGroup, InputGroup, Button, FormControl } from \"react-bootstrap\";\nimport gql from \"graphql-tag\";\n\nconst createGroupChatEntryMutation = gql`\n\tmutation createGroupChatEntry($fromId: ID!, $content: String!, $groupId: ID!) {\n\t\tcreateGroupChatEntry(fromId: $fromId, content: $content, groupId: $groupId) {\n\t\t\tcontent\n\t\t\tfrom {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t}\n\t\t\tgroup {\n\t\t\t\tid\n\t\t\t}\n\t\t\tid\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\n\nconst AddChatComponent = ({ user, group, createGroupChatEntry }) => {\n\tlet inputRef;\n\treturn (\n\t\t<div>\n\t\t\t<form\n\t\t\t\tonSubmit={e => {\n\t\t\t\t\t// Use form handle enter key quickly\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (inputRef.value.length > 0) {\n\t\t\t\t\t\tcreateGroupChatEntry({\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tfromId: user.id,\n\t\t\t\t\t\t\t\tcontent: inputRef.value,\n\t\t\t\t\t\t\t\tgroupId: group.id\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputRef.value = \"\";\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Type to talk...\"\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tinputRef={node => {\n\t\t\t\t\t\t\t\tinputRef = node;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<InputGroup.Button>\n\t\t\t\t\t\t\t<Button className=\"btn btn-primary\" type=\"submit\">\n\t\t\t\t\t\t\t\tSend\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</InputGroup.Button>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t</FormGroup>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport const AddChat = ({ user, group }) => (\n\t<Mutation mutation={createGroupChatEntryMutation}>\n\t\t{createGroupChatEntry => (\n\t\t\t<AddChatComponent\n\t\t\t\tcreateGroupChatEntry={createGroupChatEntry}\n\t\t\t\tuser={user}\n\t\t\t\tgroup={group}\n\t\t\t/>\n\t\t)}\n\t</Mutation>\n);\n","import React, { useEffect } from \"react\";\n\nimport gql from \"graphql-tag\";\n\nconst TRACK_CHAT_UPDATES_BY_GROUP = gql`\n\tsubscription changedGroupChatEntry($groupId: ID!) {\n\t\tGroupChatEntry(\n\t\t\tfilter: { mutation_in: [CREATED, UPDATED, DELETED], node: { group: { id: $groupId } } }\n\t\t) {\n\t\t\tmutation\n\t\t\tnode {\n\t\t\t\tfrom {\n\t\t\t\t\tname\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tid\n\t\t\t\tcontent\n\t\t\t\tedited\n\t\t\t\tdeleted\n\t\t\t\tcreatedAt\n\t\t\t\tgroup {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdatedFields\n\t\t\tpreviousValues {\n\t\t\t\tcontent\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const DynamicGroupMessages = ({ loading, error, subscribeToMore, group, apolloQuery }) => {\n\tuseEffect(() => {\n\t\t// The subscription will trigger on any update to the table - try and simplify\n\t\tconst unsubscribeFromGroup = subscribeToMore({\n\t\t\tdocument: TRACK_CHAT_UPDATES_BY_GROUP,\n\t\t\tvariables: { groupId: group.id },\n\t\t\tupdateQuery: (chatQueryResponse, { subscriptionData }) => {\n\t\t\t\tconst { data } = subscriptionData;\n\t\t\t\t// Updates handled here - update server data and client will auto update.\n\t\t\t\t// Nothing new, nothing removed so just send the mutated data back.\n\t\t\t\tif (!data) return chatQueryResponse;\n\n\t\t\t\t// This 'GroupChatEntry' is derived from the gql tag above.\n\t\t\t\t// The subscription returns two things we're interested in.\n\t\t\t\tconst { GroupChatEntry } = data;\n\n\t\t\t\t// The node is the recently created ChatEntry,\n\t\t\t\tconst { mutation, node } = GroupChatEntry;\n\n\t\t\t\t// Only need to handle the 'CREATED'\n\t\t\t\tconst { allGroupChatEntries = [] } = chatQueryResponse;\n\n\t\t\t\tswitch (mutation) {\n\t\t\t\t\tcase \"CREATED\":\n\t\t\t\t\t\t// Build new response with existing chat entries and the new ChatEntry\n\t\t\t\t\t\treturn Object.assign({}, chatQueryResponse, {\n\t\t\t\t\t\t\tallGroupChatEntries: [...allGroupChatEntries, node]\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn chatQueryResponse;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn () => {\n\t\t\tunsubscribeFromGroup();\n\t\t};\n\t}, []);\n\n\tconst { data } = apolloQuery;\n\tconst { allGroupChatEntries } = data;\n\n\tif (loading) return <p>Loading...</p>;\n\tif (error) return <p>Error :( {JSON.stringify(error)}</p>;\n\tif (!allGroupChatEntries) return null;\n\n\treturn (\n\t\t<ul>\n\t\t\t{allGroupChatEntries\n\t\t\t\t.filter(entry => entry.deleted !== true)\n\t\t\t\t.map(entry => (\n\t\t\t\t\t<li key={entry.id}>{JSON.stringify(entry)}</li>\n\t\t\t\t))}\n\t\t</ul>\n\t);\n};\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { DynamicGroupMessages } from \"./DynamicGroupMessages\";\n\nconst allGroupChatEntries = gql`\n\tquery allGroupChatEntries($groupId: ID!) {\n\t\tallGroupChatEntries(filter: { group: { id: $groupId } }) {\n\t\t\tfrom {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t}\n\t\t\tid\n\t\t\tcontent\n\t\t\tedited\n\t\t\tdeleted\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\n\nexport const GroupMessages = ({ user, group }) => {\n\tconsole.log({ group });\n\n\treturn (\n\t\t<Query\n\t\t\tquery={allGroupChatEntries}\n\t\t\tfetchPolicy={\"network-only\"}\n\t\t\tvariables={{ groupId: group.id }}\n\t\t>\n\t\t\t{({ subscribeToMore, ...apolloQuery }) => (\n\t\t\t\t<DynamicGroupMessages\n\t\t\t\t\tapolloQuery={apolloQuery}\n\t\t\t\t\tgroup={group}\n\t\t\t\t\tsubscribeToMore={subscribeToMore}\n\t\t\t\t\tuser={user}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</Query>\n\t);\n};\n","import React from \"react\";\n\nimport \"./ChatScreen.css\";\n\nimport { AvailableGroups } from \"./AvailableGroups\";\nimport { AddChat } from \"./AddChat\";\nimport { GroupMessages } from \"./GroupChatEntries\";\n\nexport const ChatScreen = ({ user, group, handleLogout }) => {\n\tconsole.log(user);\n\treturn (\n\t\t<div className=\"app-layout\">\n\t\t\t<div className=\"channels box\">\n\t\t\t\t<div> List channels </div>\n\t\t\t\t<AvailableGroups group={group} />\n\t\t\t</div>\n\t\t\t<div className=\"header\">\n\t\t\t\t{JSON.stringify(user)} <button onClick={handleLogout}>Logout</button>\n\t\t\t</div>\n\t\t\t<div className=\"messages box scroll-container\">\n\t\t\t\t<GroupMessages group={group} />\n\t\t\t</div>\n\t\t\t<div className=\"input box\">\n\t\t\t\t<AddChat user={user} group={group} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React, { useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { apolloClient, setBasicTokenStore } from \"./ApolloSetup\";\nimport { LoginForm } from \"./LoginForm\";\nimport gql from \"graphql-tag\";\n\nimport { ChatScreen } from \"./ChatScreen\";\nimport \"./App.css\";\n\nconst createUserAndSignOn = gql`\n\tmutation createUserAndSignOn($name: String!, $email: String!, $password: String!) {\n\t\tcreateUser(name: $name, authProvider: { email: { email: $email, password: $password } }) {\n\t\t\tid\n\t\t}\n\t\tsigninUser(email: { email: $email, password: $password }) {\n\t\t\ttoken\n\t\t\tuser {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\temail\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst signOn = gql`\n\tmutation login($email: String!, $password: String!) {\n\t\tsigninUser(email: { email: $email, password: $password }) {\n\t\t\ttoken\n\t\t\tuser {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\temail\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst App = () => {\n\tconst [user, setUser] = useState();\n\tconst [error, setError] = useState();\n\n\tconst handleLogin = async ({ name, email, password }) => {\n\t\tsetError(null);\n\t\tsetUser(null);\n\t\ttry {\n\t\t\tconst result = await apolloClient.mutate({\n\t\t\t\tmutation: name === \"\" ? signOn : createUserAndSignOn,\n\t\t\t\tvariables: {\n\t\t\t\t\tname: name,\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst { data = {} } = result;\n\t\t\tconst { signinUser = {} } = data;\n\t\t\tconst { token = \"\", ...usefulBit } = signinUser;\n\t\t\tconst { user } = usefulBit;\n\t\t\tsetBasicTokenStore(token);\n\t\t\tsetUser(user);\n\t\t} catch (e) {\n\t\t\tsetError(e.message);\n\t\t}\n\t};\n\n\tconst handleLogout = () => {\n\t\tsetUser(undefined);\n\t\tsetBasicTokenStore({ token: null });\n\t\tapolloClient.resetStore();\n\t};\n\tconst group = { name: \"General\", id: \"cjtxbbp3yglac0183o1oovog7\" }; // Hardcoded in server\n\n\treturn (\n\t\t<ApolloProvider client={apolloClient}>\n\t\t\t<>\n\t\t\t\t{user ? (\n\t\t\t\t\t<ChatScreen user={user} group={group} handleLogout={handleLogout} />\n\t\t\t\t) : (\n\t\t\t\t\t<LoginForm handleLogin={handleLogin} />\n\t\t\t\t)}\n\t\t\t\t{error && <div>{error}</div>}\n\t\t\t</>\n\t\t</ApolloProvider>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}