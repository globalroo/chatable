{"version":3,"sources":["ApolloSetup.js","App.js","serviceWorker.js","index.js"],"names":["basicTokenStore","authLink","setContext","_","_ref2","headers","token","Object","objectSpread","authorization","concat","endpoints","split","_ref3","query","_getMainDefinition","getMainDefinition","kind","operation","WebSocketLink","uri","options","reconnect","HttpLink","apolloClient","ApolloClient","link","cache","InMemoryCache","login","gql","_templateObject","attemptLogin","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","email","password","response","wrap","_context","prev","next","mutate","mutation","variables","sent","abrupt","stop","_x","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","setResponse","useEffect","then","setBasicTokenStore","react_default","createElement","react_apollo_esm","client","Fragment","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAUIA,EAAkB,KAIhBC,EAAWC,YAAW,SAACC,EAADC,GAAoB,IAAdC,EAAcD,EAAdC,QAC3BC,EAAQN,EACd,MAAO,CACNK,QAAQE,OAAAC,EAAA,EAAAD,CAAA,GACJF,EADG,CAENI,cAAeH,EAAK,UAAAI,OAAaJ,GAAU,QAMxCK,EAAYC,YACjB,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAAYC,EACcC,YAAkBF,GAAtCG,EADMF,EACNE,KAAMC,EADAH,EACAG,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,GAE1C,IAAIC,IAAc,CACjBC,IAAG,8DACHC,QAAS,CACRC,WAAW,KAGb,IAAIC,IAAS,CACZH,IAAK,gEAKMI,EAAe,IAAIC,IAAa,CAC5CC,KAAMzB,EAASS,OAAOC,GACtBgB,MAAO,IAAIC,uTC7BZ,IAAMC,EAAQC,IAAHC,KAaLC,EAAY,eAAA5B,EAAAG,OAAA0B,EAAA,EAAA1B,CAAA2B,EAAAC,EAAAC,KAAG,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAASN,EAATD,EAASC,MAAOC,EAAhBF,EAAgBE,SAAhBG,EAAAE,KAAA,EAEGrB,EAAasB,OAAO,CAC1CC,SAAUlB,EACVmB,UAAW,CACVT,QACAC,cANkB,cAEdC,EAFcE,EAAAM,KAAAN,EAAAO,OAAA,SASbT,GATa,wBAAAE,EAAAQ,SAAAd,MAAH,gBAAAe,GAAA,OAAAhD,EAAAiD,MAAAC,KAAAC,YAAA,GA2BHC,EAfH,WAAM,IAAAC,EACeC,qBADfC,EAAApD,OAAAqD,EAAA,EAAArD,CAAAkD,EAAA,GACVhB,EADUkB,EAAA,GACAE,EADAF,EAAA,GAQjB,OANAG,oBAAU,WACT9B,EAAa,CAAEO,MAAO,OAAQC,SAAU,SAAUuB,KAAK,SAAAtB,GACtDoB,EAAYpB,GDjCmB,SAAAH,GAAA,IAAGhC,EAAHgC,EAAGhC,MAAaN,EAAkBM,ECkCjE0D,CAAmBvB,MAElB,IAEFwB,EAAA9B,EAAA+B,cAACC,EAAA,EAAD,CAAgBC,OAAQ5C,GACvByC,EAAA9B,EAAA+B,cAAAD,EAAA9B,EAAAkC,SAAA,KAAG5B,GAAYwB,EAAA9B,EAAA+B,cAAA,WAAMI,KAAKC,UAAU9B,OCtCnB+B,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXjCC,IAASC,OAAOb,EAAA9B,EAAA+B,cAACa,EAAD,MAASC,SAASC,eAAe,SDuH5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GAClCA,EAAaC","file":"static/js/main.74446b56.chunk.js","sourcesContent":["import { ApolloClient } from \"apollo-client\";\n\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\n\nlet basicTokenStore = null;\nexport const setBasicTokenStore = ({ token }) => (basicTokenStore = token);\n\n// Add token to header\nconst authLink = setContext((_, { headers }) => {\n\tconst token = basicTokenStore;\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\"\n\t\t}\n\t};\n});\n\n// Ensure subscriptions hit the websocket connection and CRUD hit Simple API\nconst endpoints = split(\n\t({ query }) => {\n\t\tconst { kind, operation } = getMainDefinition(query);\n\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t},\n\tnew WebSocketLink({\n\t\turi: `wss://subscriptions.graph.cool/v1/cjhdp4tzl2r890195ggdfyv2h`,\n\t\toptions: {\n\t\t\treconnect: true\n\t\t}\n\t}),\n\tnew HttpLink({\n\t\turi: \"https://api.graph.cool/simple/v1/cjhdp4tzl2r890195ggdfyv2h\"\n\t})\n);\n\n// Bind ApolloClient to our endpoint and Auth config.\nexport const apolloClient = new ApolloClient({\n\tlink: authLink.concat(endpoints),\n\tcache: new InMemoryCache()\n});\n","import React, { useEffect, useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { apolloClient, setBasicTokenStore } from \"./ApolloSetup\";\nimport gql from \"graphql-tag\";\n\nimport \"./App.css\";\n\n/* CREATE USER MUTATION\nmutation {\n  createUser(name: \"testUser\", authProvider: {email: {email: \"null\", password: \"null\"}}) {\n    id\n  }\n}\n*/\n\nconst login = gql`\n\tmutation login($email: String!, $password: String!) {\n\t\tsigninUser(email: { email: $email, password: $password }) {\n\t\t\ttoken\n\t\t\tuser {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\temail\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst attemptLogin = async ({ email, password }) => {\n\t// Perform signin mutation\n\tconst response = await apolloClient.mutate({\n\t\tmutation: login,\n\t\tvariables: {\n\t\t\temail,\n\t\t\tpassword\n\t\t}\n\t});\n\treturn response;\n};\n\nconst App = () => {\n\tconst [response, setResponse] = useState();\n\tuseEffect(() => {\n\t\tattemptLogin({ email: \"null\", password: \"null\" }).then(response => {\n\t\t\tsetResponse(response);\n\t\t\tsetBasicTokenStore(response);\n\t\t});\n\t}, []);\n\treturn (\n\t\t<ApolloProvider client={apolloClient}>\n\t\t\t<>{response && <div>{JSON.stringify(response)}</div>}</>\n\t\t</ApolloProvider>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}