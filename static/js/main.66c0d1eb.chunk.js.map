{"version":3,"sources":["ApolloSetup.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["basicTokenStore","setBasicTokenStore","_ref","token","authLink","setContext","_","_ref2","headers","Object","objectSpread","authorization","concat","endpoints","split","_ref3","query","_getMainDefinition","getMainDefinition","kind","operation","WebSocketLink","uri","options","reconnect","HttpLink","apolloClient","ApolloClient","link","cache","InMemoryCache","useInputHook","initialValue","arguments","length","undefined","_useState","useState","_useState2","slicedToArray","value","setValue","onChange","e","target","LoginForm","handleLogin","_useState3","_useState4","loginMode","setLoginMode","email","name","password","react_default","a","createElement","Modal","Dialog","Body","className","FormGroup","FormControl","assign","autoFocus","type","placeholder","Button","onClick","createUserAndSignOn","gql","_templateObject","signOn","_templateObject2","App","user","setUser","error","setError","attemptLogin","asyncToGenerator","regenerator_default","mark","_callee","result","_result$data","_data$signinUser","signinUser","_signinUser$token","wrap","_context","prev","next","mutate","mutation","variables","sent","data","t0","message","stop","_x","apply","this","react_apollo_esm","client","Fragment","LoginForm_LoginForm","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66c0d1eb.chunk.js","sourcesContent":["import { ApolloClient } from \"apollo-client\";\n\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\n\nlet basicTokenStore = null;\nexport const setBasicTokenStore = ({ token }) => (basicTokenStore = token);\n\n// Add token to header\nconst authLink = setContext((_, { headers }) => {\n\tconst token = basicTokenStore;\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\"\n\t\t}\n\t};\n});\n\n// Ensure subscriptions hit the websocket connection and CRUD hit Simple API\nconst endpoints = split(\n\t({ query }) => {\n\t\tconst { kind, operation } = getMainDefinition(query);\n\t\treturn kind === \"OperationDefinition\" && operation === \"subscription\";\n\t},\n\tnew WebSocketLink({\n\t\turi: `wss://subscriptions.graph.cool/v1/cjhdp4tzl2r890195ggdfyv2h`,\n\t\toptions: {\n\t\t\treconnect: true\n\t\t}\n\t}),\n\tnew HttpLink({\n\t\turi: \"https://api.graph.cool/simple/v1/cjhdp4tzl2r890195ggdfyv2h\"\n\t})\n);\n\n// Bind ApolloClient to our endpoint and Auth config.\nexport const apolloClient = new ApolloClient({\n\tlink: authLink.concat(endpoints),\n\tcache: new InMemoryCache()\n});\n","import React, { useState } from \"react\";\n\nimport { FormGroup, Modal, FormControl, Button } from \"react-bootstrap\";\n\nexport const useInputHook = (initialValue = \"\") => {\n\tconst [value, setValue] = useState(initialValue);\n\tconst onChange = e => setValue(e.target.value);\n\treturn {\n\t\tvalue,\n\t\tonChange\n\t};\n};\n\nexport const LoginForm = ({ handleLogin }) => {\n\tconst [loginMode, setLoginMode] = useState(true); // Login or Sign Up\n\tconst email = useInputHook();\n\tconst name = useInputHook();\n\tconst password = useInputHook();\n\treturn (\n\t\t<Modal.Dialog>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"login-logo-container\">\n\t\t\t\t\t<h1>Chatable</h1>\n\t\t\t\t\t<h5>Create a user or use 'test/test' for signin</h5>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"login-title-container\">\n\t\t\t\t\t<span className=\"login-title-text\">{loginMode ? \"Login\" : \"Sign Up\"}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<FormGroup>\n\t\t\t\t\t{!loginMode && (\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Your name (to be used in chat)\"\n\t\t\t\t\t\t\t{...name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<FormControl autoFocus={true} type=\"email\" placeholder=\"Email\" {...email} />\n\t\t\t\t\t<FormControl type=\"password\" placeholder=\"Password\" {...password} />\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Button className=\"pointer\" onClick={() => setLoginMode(!loginMode)}>\n\t\t\t\t\t\t{loginMode ? \"Don't have an account? Sign up\" : \"Have an account? Log in\"}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"pull-right pointer\"\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thandleLogin({\n\t\t\t\t\t\t\t\tname: name.value,\n\t\t\t\t\t\t\t\temail: email.value,\n\t\t\t\t\t\t\t\tpassword: password.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{loginMode ? \"Login\" : \"Create User\"}\n\t\t\t\t\t</Button>\n\t\t\t\t</FormGroup>\n\t\t\t</Modal.Body>\n\t\t</Modal.Dialog>\n\t);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { apolloClient, setBasicTokenStore } from \"./ApolloSetup\";\nimport { LoginForm } from \"./LoginForm\";\nimport gql from \"graphql-tag\";\n\nimport \"./App.css\";\n\nconst createUserAndSignOn = gql`\n\tmutation createUserAndSignOn($name: String!, $email: String!, $password: String!) {\n\t\tcreateUser(name: $name, authProvider: { email: { email: $email, password: $password } }) {\n\t\t\tid\n\t\t}\n\t\tsigninUser(email: { email: $email, password: $password }) {\n\t\t\ttoken\n\t\t\tuser {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\temail\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst signOn = gql`\n\tmutation login($email: String!, $password: String!) {\n\t\tsigninUser(email: { email: $email, password: $password }) {\n\t\t\ttoken\n\t\t\tuser {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\temail\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst App = () => {\n\tconst [user, setUser] = useState();\n\tconst [error, setError] = useState();\n\n\tconst attemptLogin = async ({ name, email, password }) => {\n\t\tsetError(null);\n\t\tsetUser(null);\n\t\ttry {\n\t\t\tconst result = await apolloClient.mutate({\n\t\t\t\tmutation: name === \"\" ? signOn : createUserAndSignOn,\n\t\t\t\tvariables: {\n\t\t\t\t\tname: name,\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst { data = {} } = result;\n\t\t\tconst { signinUser = {} } = data;\n\t\t\tconst { token = \"\" } = signinUser;\n\t\t\tsetBasicTokenStore(token);\n\t\t\tsetUser(signinUser);\n\t\t} catch (e) {\n\t\t\tsetError(e.message);\n\t\t}\n\t};\n\treturn (\n\t\t<ApolloProvider client={apolloClient}>\n\t\t\t<>\n\t\t\t\t<LoginForm handleLogin={attemptLogin} />\n\t\t\t\t{user && <div>{JSON.stringify(user)}</div>}\n\t\t\t\t{error && <div>{error}</div>}\n\t\t\t</>\n\t\t</ApolloProvider>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}